name:  Terraform Workflow   					#workflow
on:                                   
  push: {}
  pull_request: {}
  workflow_dispatch : {}

permissions:
  id-token: write # required for requesting the JWT 
  pull-requests: read
  contents: read


jobs:
  detect-changes:
    runs-on: ubuntu-latest		 #Runner
    outputs:
      all-changes: ${{ steps.changed-files.outputs.all_changed_files }}
    
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
    
    - name: Run changed-files with dir_names
      id: changed-files
      uses: tj-actions/changed-files@v45
      with:
        files: |
            **.tf
            environments/**.tf
        dir_names: true
        matrix: true
        #dir_names_include_files_separator: ','
    
    - name: Generate Matrix Data
      id: generate-matrix
      run: |
        MATRIX_ENTRIES=()
        CHANGED_FOLDERS="${{ steps.changed-files.outputs.all_changed_files }}"
        
        # Loop through the changed folders and build matrix entries
        for folder in $CHANGED_FOLDERS; do
          ENV_NAME=$(basename $(dirname $folder)) # Extract the environment name from the path
          MATRIX_ENTRIES+=("{\"path\":\"$folder\",\"environment\":\"$ENV_NAME\"}")
        done

        # Create a JSON array from the matrix entries
        MATRIX_JSON=$(printf ",%s" "${MATRIX_ENTRIES[@]}")
        MATRIX_JSON="[${MATRIX_JSON:1}]"
        echo "Generated matrix data: $MATRIX_JSON"
        echo "::set-output name=matrix-data::$MATRIX_JSON"
      
    - name: Debug Matrix Data
      run: echo "${{ steps.generate-matrix.outputs.matrix-data }}"

    - name: List all changed folders
      env:
        ALL_CHANGED_FOLDERS: ${{ steps.changed-files.outputs.all_changed_files }}
      run: |
        for file in ${ALL_CHANGED_FOLDERS}; do
          echo "$file was changed"
        done


  test-terraform-iac:
    needs: [detect-changes]
    strategy:
      matrix:
        #changed_paths: ${{ fromJSON(needs.detect-changes.outputs.all-changes) }}
        config:
          - path: ["environments/staging/ec2"]
            environment: ["staging"]
          - path: ["environments/production/ec2"]
            environment: ["production"]
    #if: always()
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    #if: contains(fromJSON('["push", "pull_request"]'), github.event_name)
    runs-on: ubuntu-latest		 #Runner
    environment: ${{ matrix.config.environment }}
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.7"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: List Matrix Values
      run: |
        echo "Matrix Changed Paths Values: ${{ matrix.config.path }}"
        echo "Matrix Environment Values: ${{ matrix.config.environment }}"

    - name: Run Terraform Plan
      env:
        ALL_CHANGED_FOLDERS: ${{ needs.detect-changes.outputs.all-changes }}
      run: |
          #changed_dirs=$(git diff --name-only ${{ github.event.after }} ${{ github.event.before }} | grep '\.tf$' | grep 'environments/' | cut -d'/' -f1-3 | sort -u)
          echo "Changed directories: ${ALL_CHANGED_FOLDERS}"
          cd ${{ matrix.config.path }}
          terraform init
          terraform validate
          terraform plan -detailed-exitcode -out=tfplan
          cd - # Go back to the root directory after each plan

          # Loop over each changed directory and run terraform plan
          #for dir in ${ALL_CHANGED_FOLDERS}; do
            #echo "Running terraform plan in $dir"
            #cd $dir
            #terraform init
            #terraform validate
            #terraform plan -detailed-exitcode -out=tfplan
            #cd - # Go back to the root directory after each plan
          #done

    - name: uplaod tfplan files artifacts
      #env:
        #ALL_CHANGED_FOLDERS: ${{ steps.changed-files.outputs.all_changed_files }}
      uses: actions/upload-artifact@v4
      with:
        name: all-changed-folders-${{ strategy.job-index }}
        include-hidden-files: true
        #retention-days: 5
        path: |
          ${{ matrix.config.path  }}/tfplan
          ${{ matrix.config.path  }}/.terraform
          ${{ matrix.config.path  }}/.terraform.lock.hcl
            


  deploy-terraform-iac:
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'pull_request' }}
    needs: [test-terraform-iac]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.7"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - uses: actions/download-artifact@v4
      with:
        path: environments/
        merge-multiple: true
      # with:
      #   name: all-changed-folders
      #   path: |
      #     environments/**/tfplan
      #     environments/**/.terraform
      #     environments/**/.terraform.lock.hcl

    - name: Display structure of downloaded files
      run: |
        ls *
        echo "Folder Structure--------------------------------------------------------------"
        ls -R
        echo "Folder Structure--------------------------------------------------------------"
        ls -LR

    - name: Run Terraform Apply
      env:
        ALL_CHANGED_FOLDERS: ${{ needs.detect-changes.outputs.all-changes }}
      run: |
          echo "Changed directories: ${ALL_CHANGED_FOLDERS}"
          # Loop over each changed directory and run terraform plan
          for dir in ${ALL_CHANGED_FOLDERS}; do
            echo "Running terraform apply in $dir"
            cd $dir
            chmod -R +x .terraform/* 
            terraform apply --auto-approve -input=false tfplan
            cd - # Go back to the root directory after each plan
          done

